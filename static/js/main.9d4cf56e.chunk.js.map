{"version":3,"sources":["redux/reducers/player.js","redux/reducers/saveToken.js","redux/reducers/index.js","redux/store/index.js","services/getTokenTriviaAPI.js","redux/actions/index.js","pages/Login.jsx","pages/Congif.jsx","services/getImageGravatarAPI.js","components/Header.jsx","functions/shuffleArray.js","functions/prepareScore.js","components/Answers.jsx","components/Questions.jsx","services/getQuestionsAPI.js","pages/Game.jsx","pages/Feedback.jsx","pages/Ranking.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","gravatarEmail","name","assertions","score","player","state","action","type","token","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","getTokenTriviaAPI","a","fetch","request","json","data","playerLoginTokenSuccess","playerLoginTokenError","storeToken","Login","props","redirectToPlay","saveTokenToStore","playerEmail","playerName","setState","willRedirectToGame","redirectToConfig","willRedirectToConfig","saveInfoToState","event","target","value","this","style","backgroundColor","className","src","alt","width","htmlFor","color","id","onChange","data-testid","disabled","onClick","to","Component","connect","dispatch","email","playerLogin","Config","getImageGravatarAPI","input","correctInput","trim","toLowerCase","correctEmail","hash","md5","toString","Header","playerInfo","useSelector","playerImageSrc","borderRadius","shuffleArray","array","i","length","randomPosition","Math","floor","random","currentElement","prepareScore","difficulty","timeLeft","difficultyValue","Answers","correctAnswer","incorrectAnswers","showButton","showWrongAnswerColor","showRightAnswerColor","wrongAnswerColor","rightAnswerColor","setCount","count","setDisableButtons","disabledButtons","useDispatch","useState","shuffledAnswers","setShuffledAnswers","correctAnswerCheck","incorrectAnswerIndex","useEffect","answersArray","forEach","incorrectAnswer","index","intervalCount","setTimeout","clearTimeout","border","checkIfCorrect","roundScore","map","answer","key","Questions","questions","defaultBorderStyle","history","useHistory","currentQuestion","setCurrentQuestion","willButtonShowUp","setWillButtonShowUp","setWrongAnswerColor","setRightAnswerColor","category","question","correct_answer","incorrect_answers","storagePlayerInfo","picture","ranking","JSON","parse","localStorage","getItem","push","console","log","setItem","stringify","he","require","getEncodedQuestions","url","getQuestionsAPI","newResult","results","qst","decode","Game","setQuestions","gotQuestions","response_code","newToken","getQuestions","document","body","Feedback","playerMessage","setPlayerMessage","Ranking","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d4cf56e.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  gravatarEmail: '',\n  name: '',\n  assertions: 0,\n  score: 0,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'SAVE_LOGIN':\n    return {\n      ...state,\n      gravatarEmail: action.gravatarEmail,\n      name: action.name,\n    };\n  case 'NEW_ASSERTION':\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n      score: state.score + action.score,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","const token = (state = '', action) => {\n  switch (action.type) {\n  case 'SAVE_TOKEN':\n    return action.token;\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './saveToken';\n\nconst rootReducer = combineReducers({\n  player,\n  token,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// import for tests here\n// import fetch from 'node-fetch';\n\nconst getTokenTriviaAPI = async () => {\n  const url = 'https://opentdb.com/api_token.php?command=request';\n  const request = await fetch(url);\n  const data = await request.json();\n  return data;\n};\n\nexport default getTokenTriviaAPI;\n","import getTokenTriviaAPI from '../../services/getTokenTriviaAPI';\n\nconst playerLoginTokenSuccess = (gravatarEmail, name) => (\n  { type: 'SAVE_LOGIN', gravatarEmail, name }\n);\n\nconst playerLoginTokenError = (gravatarEmail, name) => (\n  { type: 'SAVE_LOGIN_TOKEN_ERROR', gravatarEmail, name }\n);\n\nexport const storeToken = (token) => (\n  { type: 'SAVE_TOKEN', token }\n);\n\nexport const newAssertion = (score) => (\n  { type: 'NEW_ASSERTION', score }\n);\n\nexport function playerLogin(email, name) {\n  return async (dispatch) => {\n    try {\n      const { token } = await getTokenTriviaAPI();\n      dispatch(playerLoginTokenSuccess(email, name));\n      dispatch(storeToken(token));\n    } catch (error) {\n      dispatch(playerLoginTokenError(email, name));\n    }\n  };\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/jsx-max-depth */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { playerLogin } from '../redux/actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playerEmail: '',\n      playerName: '',\n      willRedirectToGame: false,\n      willRedirectToConfig: false,\n    };\n  }\n\n  redirectToPlay = async () => {\n    const { saveTokenToStore } = this.props;\n    const { playerEmail, playerName } = this.state;\n    saveTokenToStore(playerEmail, playerName);\n\n    this.setState({\n      willRedirectToGame: true,\n    });\n  }\n\n  redirectToConfig = () => {\n    this.setState({\n      willRedirectToConfig: true,\n    });\n  }\n\n  saveInfoToState = (event) => {\n    const { value, name } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const {\n      playerEmail,\n      playerName,\n      willRedirectToGame,\n      willRedirectToConfig,\n    } = this.state;\n    return (\n      <main style={ { backgroundColor: '#290661' } }>\n        <div className=\"container\">\n          <div className=\"row justify-content-center align-items-center vh-100\">\n            <div className=\"col-auto\">\n              <div className=\"row\">\n                <img\n                  src=\"https://i.imgur.com/qZJ52co.png\"\n                  alt=\"lorem picsum\"\n                  style={ { width: '25vw' } }\n                  className=\"img-thumbnail mb-3 p-2\"\n                />\n              </div>\n              <form>\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <label\n                      htmlFor=\"femail\"\n                      className=\"form-label\"\n                      style={ { color: 'white' } }\n                    >\n                      Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      name=\"playerEmail\"\n                      id=\"femail\"\n                      onChange={ this.saveInfoToState }\n                      data-testid=\"input-gravatar-email\"\n                      className=\"form-control\"\n                    />\n                    <label\n                      htmlFor=\"fname\"\n                      className=\"form-label mt-2\"\n                      style={ { color: 'white' } }\n                    >\n                      Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"playerName\"\n                      id=\"fname\"\n                      onChange={ this.saveInfoToState }\n                      data-testid=\"input-player-name\"\n                      className=\"form-control\"\n                    />\n                  </div>\n                </div>\n                <div className=\"row mt-3\">\n                  <div className=\"col\">\n                    <label htmlFor=\"fsbmt\">\n                      <input\n                        type=\"button\"\n                        name=\"button-sbmt\"\n                        id=\"fsbmt\"\n                        value=\"Play\"\n                        disabled={ !(playerEmail !== '' && playerName !== '') }\n                        onClick={ this.redirectToPlay }\n                        data-testid=\"btn-play\"\n                        className=\"btn btn-primary\"\n                      />\n                    </label>\n                    <button\n                      type=\"button\"\n                      name=\"button-config\"\n                      onClick={ this.redirectToConfig }\n                      data-testid=\"btn-settings\"\n                      className=\"btn btn-secondary ms-2\"\n                    >\n                      Configurations\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n        { willRedirectToConfig && <Redirect to=\"/config\" /> }\n        { willRedirectToGame && <Redirect to=\"/game\" /> }\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveTokenToStore: (email, name) => (dispatch(playerLogin(email, name))),\n});\n\nLogin.propTypes = {\n  saveTokenToStore: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Config() {\n  return (\n    <div>\n      <Link to=\"/\">Login</Link>\n      <h3\n        data-testid=\"settings-title\"\n      >\n        Configuration\n      </h3>\n    </div>\n  );\n}\n\nexport default Config;\n","import md5 from 'crypto-js/md5';\n\nconst correctEmail = (input) => ((input.trim()).toLowerCase());\n\nconst getImageGravatarAPI = (input) => {\n  const correctInput = correctEmail(input);\n  const hash = md5(correctInput).toString();\n  const urlForImage = `https://www.gravatar.com/avatar/${hash}`;\n  return urlForImage;\n};\n\nexport default getImageGravatarAPI;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport getImageGravatarAPI from '../services/getImageGravatarAPI';\n\nfunction Header() {\n  const playerInfo = useSelector((store) => store.player);\n  const playerImageSrc = getImageGravatarAPI(playerInfo.gravatarEmail);\n\n  return (\n    <header>\n      <div className=\"row justify-content-center\">\n        <img\n          src={ playerImageSrc }\n          alt=\"Imagem de Perfil\"\n          data-testid=\"header-profile-picture\"\n          style={ { borderRadius: '50%', width: '10vw' } }\n          className=\"img-fluid\"\n        />\n      </div>\n      <div className=\"row justify-content-center\">\n        <div className=\"col-auto\">\n          <p data-testid=\"header-player-name\" className=\"fs-3 text-uppercase mt-1\">\n            {playerInfo.name}\n          </p>\n        </div>\n      </div>\n      <p\n        data-testid=\"header-score\"\n        className=\"p-3 rounded\"\n        style={ { backgroundColor: '#8540f5' } }\n      >\n        Score:\n        <span className=\"ms-2\">{ playerInfo.score }</span>\n      </p>\n    </header>\n  );\n}\n\nexport default Header;\n","function shuffleArray(array) {\n  for (let i = 0; i < array.length; i += 1) {\n    const randomPosition = Math.floor(Math.random() * array.length);\n    const currentElement = array[i];\n    array[i] = array[randomPosition];\n    array[randomPosition] = currentElement;\n  }\n  return array;\n}\n\nexport default shuffleArray;\n","function prepareScore(difficulty, timeLeft) {\n  const scoreToAdd = 10;\n  const three = 3;\n  let difficultyValue = 0;\n  if (difficulty === 'hard') difficultyValue = three;\n  if (difficulty === 'medium') difficultyValue = 2;\n  if (difficulty === 'easy') difficultyValue = 1;\n  return scoreToAdd + (timeLeft * difficultyValue);\n}\n\nexport default prepareScore;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport shuffleArray from '../functions/shuffleArray';\nimport prepareScore from '../functions/prepareScore';\nimport { newAssertion } from '../redux/actions';\n\nconst intervalOfCountdown = 1000;\n\nfunction Answers(props) {\n  const {\n    correctAnswer,\n    incorrectAnswers,\n    showButton,\n    showWrongAnswerColor,\n    showRightAnswerColor,\n    wrongAnswerColor,\n    rightAnswerColor,\n    setCount,\n    count,\n    setDisableButtons,\n    disabledButtons,\n    difficulty,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n\n  const correctAnswerCheck = correctAnswer;\n  let incorrectAnswerIndex = 0;\n\n  useEffect(() => {\n    const answersArray = [correctAnswer];\n    incorrectAnswers.forEach((incorrectAnswer, index) => {\n      answersArray[index + 1] = incorrectAnswer;\n    });\n    setShuffledAnswers(shuffleArray(answersArray));\n  }, [correctAnswer, incorrectAnswers]);\n\n  useEffect(() => {\n    const intervalCount = setTimeout(() => {\n      setCount(count - 1);\n    }, intervalOfCountdown);\n    if (disabledButtons === true) clearTimeout(intervalCount);\n    if (count === 0) {\n      clearTimeout(intervalCount);\n      setDisableButtons(true);\n      showRightAnswerColor({ border: '3px solid rgb(6, 240, 15)' });\n      showWrongAnswerColor({ border: '3px solid rgb(255, 0, 0)' });\n      showButton(true);\n    }\n    return () => clearTimeout(intervalCount);\n  }, [\n    setCount,\n    count,\n    showRightAnswerColor,\n    showWrongAnswerColor,\n    showButton,\n    setDisableButtons,\n    disabledButtons,\n  ]);\n\n  const checkIfCorrect = ({ target }) => {\n    showButton(true);\n    setDisableButtons(true);\n    showRightAnswerColor({ border: '3px solid rgb(6, 240, 15)' });\n    showWrongAnswerColor({ border: '3px solid rgb(255, 0, 0)' });\n    const { value } = target;\n    if (value === 'right') {\n      const roundScore = prepareScore(difficulty, count);\n      dispatch(newAssertion(roundScore));\n    }\n  };\n\n  return (\n    <ul className=\"list-group list-group-flush\">\n      {\n        shuffledAnswers.map((answer, index) => {\n          if (answer === correctAnswerCheck) {\n            return (\n              <li className=\"list-group-item\" key={ index }>\n                <button\n                  type=\"button\"\n                  style={ rightAnswerColor }\n                  value=\"right\"\n                  data-testid=\"correct-answer\"\n                  onClick={ checkIfCorrect }\n                  disabled={ disabledButtons }\n                >\n                  { answer }\n                </button>\n              </li>\n            );\n          }\n          incorrectAnswerIndex += 1;\n          return (\n            <li className=\"list-group-item\" key={ index }>\n              <button\n                type=\"button\"\n                style={ wrongAnswerColor }\n                value=\"wrong\"\n                data-testid={ `wrong-answer-${incorrectAnswerIndex - 1}` }\n                onClick={ checkIfCorrect }\n                disabled={ disabledButtons }\n              >\n                { answer }\n              </button>\n            </li>\n          );\n        })\n      }\n      <div className=\"row justify-content-center\">\n        <div className=\"col-auto mt-3\">\n          <p>\n            { count }\n          </p>\n        </div>\n      </div>\n    </ul>\n  );\n}\n\nAnswers.propTypes = {\n  correctAnswer: PropTypes.string.isRequired,\n  incorrectAnswers: PropTypes.arrayOf(PropTypes.string).isRequired,\n  showButton: PropTypes.func.isRequired,\n  showWrongAnswerColor: PropTypes.func.isRequired,\n  showRightAnswerColor: PropTypes.func.isRequired,\n  wrongAnswerColor: PropTypes.objectOf(PropTypes.string).isRequired,\n  rightAnswerColor: PropTypes.objectOf(PropTypes.string).isRequired,\n  setCount: PropTypes.func.isRequired,\n  count: PropTypes.number.isRequired,\n  setDisableButtons: PropTypes.func.isRequired,\n  disabledButtons: PropTypes.bool.isRequired,\n  difficulty: PropTypes.string.isRequired,\n};\n\nexport default Answers;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport Answers from './Answers';\nimport getImageGravatarAPI from '../services/getImageGravatarAPI';\n\nfunction Questions(props) {\n  const { questions } = props;\n  const defaultBorderStyle = { border: '3px solid white' };\n  const initialNumberForCountDown = 30;\n  const history = useHistory();\n  const playerInfo = useSelector((store) => store.player);\n  const playerImageSrc = getImageGravatarAPI(playerInfo.gravatarEmail);\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [willButtonShowUp, setWillButtonShowUp] = useState(false);\n  const [wrongAnswerColor, setWrongAnswerColor] = useState(defaultBorderStyle);\n  const [rightAnswerColor, setRightAnswerColor] = useState(defaultBorderStyle);\n  const [count, setCount] = useState(initialNumberForCountDown);\n  const [disabledButtons, setDisableButtons] = useState(false);\n\n  const goToNextQuestion = () => {\n    const maxQuestionNumber = 4;\n    if (currentQuestion < maxQuestionNumber) {\n      setCurrentQuestion(currentQuestion + 1);\n      setWillButtonShowUp(false);\n      setWrongAnswerColor(defaultBorderStyle);\n      setRightAnswerColor(defaultBorderStyle);\n      setCount(initialNumberForCountDown);\n      setDisableButtons(false);\n    } else {\n      const storagePlayerInfo = {\n        name: playerInfo.name,\n        score: playerInfo.score,\n        picture: playerImageSrc,\n      };\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      ranking.push(storagePlayerInfo);\n      console.log(ranking);\n      localStorage.setItem('ranking', JSON.stringify(ranking));\n      history.push('/feedback');\n    }\n  };\n\n  return (\n    <main>\n      <section>\n        <h3 data-testid=\"question-category\">{ questions[currentQuestion].category }</h3>\n      </section>\n      <article data-testid=\"answer-options\" style={ { color: '#495057' } }>\n        <div className=\"card\">\n          <div className=\"card-header\">\n            <p data-testid=\"question-text\">{ questions[currentQuestion].question }</p>\n          </div>\n          <Answers\n            correctAnswer={ questions[currentQuestion].correct_answer }\n            incorrectAnswers={ questions[currentQuestion].incorrect_answers }\n            difficulty={ questions[currentQuestion].difficulty }\n            showButton={ setWillButtonShowUp }\n            showWrongAnswerColor={ setWrongAnswerColor }\n            showRightAnswerColor={ setRightAnswerColor }\n            wrongAnswerColor={ wrongAnswerColor }\n            rightAnswerColor={ rightAnswerColor }\n            count={ count }\n            setCount={ setCount }\n            setDisableButtons={ setDisableButtons }\n            disabledButtons={ disabledButtons }\n          />\n        </div>\n      </article>\n      {\n        willButtonShowUp && (\n          <button\n            type=\"button\"\n            onClick={ goToNextQuestion }\n            data-testid=\"btn-next\"\n            className=\"mt-3 btn btn-primary\"\n          >\n            Next\n          </button>\n        )\n      }\n    </main>\n  );\n}\n\nQuestions.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Questions;\n","const he = require('he');\n\nconst getEncodedQuestions = async (token) => {\n  const url = `https://opentdb.com/api.php?amount=5&token=${token}`;\n  const request = await fetch(url);\n  const data = await request.json();\n  return data;\n};\n\nconst getQuestionsAPI = async (token) => {\n  const data = await getEncodedQuestions(token);\n  const newResult = data.results.map((qst) => (\n    {\n      ...qst,\n      question: he.decode(qst.question),\n    }\n  ));\n  data.results = newResult;\n  return data;\n};\n\nexport default getQuestionsAPI;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Header from '../components/Header';\nimport Questions from '../components/Questions';\nimport { storeToken } from '../redux/actions';\nimport getQuestionsAPI from '../services/getQuestionsAPI';\nimport getTokenTriviaAPI from '../services/getTokenTriviaAPI';\n\nfunction Game() {\n  const dispatch = useDispatch();\n  const { token } = useSelector((store) => store);\n\n  const [questions, setQuestions] = useState({});\n\n  useEffect(() => {\n    if (!localStorage.ranking) {\n      localStorage.setItem('ranking', '[]');\n    }\n  }, []);\n\n  useEffect(() => {\n    const codeForExpiredToken = 3;\n    const getQuestions = async () => {\n      let gotQuestions = await getQuestionsAPI(token);\n      console.log(gotQuestions);\n      if (gotQuestions.response_code === codeForExpiredToken) {\n        const newToken = await getTokenTriviaAPI();\n        dispatch(storeToken(newToken));\n        gotQuestions = await getQuestionsAPI(newToken);\n      }\n      setQuestions(gotQuestions);\n    };\n    getQuestions();\n  }, [token, dispatch]);\n\n  useEffect(() => { document.body.style.backgroundColor = '#290661'; }, []);\n\n  return (\n    <div>\n      <div className=\"container\" style={ { color: 'white' } }>\n        <div className=\"row justify-content-center align-items-center vh-100\">\n          <div className=\"col-auto\">\n            <Header />\n            {\n              questions.results && (\n                <Questions\n                  questions={ questions.results }\n                />\n              )\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","/* eslint-disable react/jsx-max-depth */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\n\nconst minimumAssertions = 3;\n\nfunction Feedback() {\n  const playerInfo = useSelector((store) => store.player);\n\n  const [playerMessage, setPlayerMessage] = useState('');\n\n  useEffect(() => {\n    if (playerInfo.assertions < minimumAssertions) {\n      setPlayerMessage('Could be better...');\n    } else {\n      setPlayerMessage('Well done!');\n    }\n  }, [playerInfo]);\n\n  useEffect(() => { document.body.style.backgroundColor = '#290661'; }, []);\n\n  return (\n    <div className=\"vh-100\">\n      <div className=\"container text-white p-5\">\n        <Header />\n        <section className=\"\">\n          <div\n            className=\"row justify-content-center rounded\"\n            style={ { backgroundColor: '#140330' } }\n          >\n            <div className=\"col-auto\">\n              <div className=\"row justify-content-center mt-3\">\n                <div className=\"col-auto\">\n                  <p className=\"fs-4\">\n                    Thiago says,\n                  </p>\n                </div>\n              </div>\n              <div className=\"row justify-content-center\">\n                <div className=\"col-auto\">\n                  <p data-testid=\"feedback-text\" className=\"fs-1\">\n                    {playerMessage}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            style={ { backgroundColor: '#8540f5' } }\n            className=\"p-2 rounded mt-3\"\n          >\n            <p data-testid=\"feedback-total-score\" className=\"mt-1 fs-4\">\n              <span>All your score this time: </span>\n              {playerInfo.score}\n            </p>\n            <hr style={ { backgroundColor: 'black' } } className=\"p-1\" />\n            <p data-testid=\"feedback-total-question\" className=\"mb-1 fs-4\">\n              <span>Number of correct shots: </span>\n              {playerInfo.assertions}\n            </p>\n          </div>\n        </section>\n        <div className=\"row justify-content-around gap-3 text-center mt-3\">\n          <Link\n            data-testid=\"btn-play-again\"\n            to=\"/\"\n            className=\"col btn btn-light\"\n          >\n            Play Again\n          </Link>\n          <Link\n            data-testid=\"btn-ranking\"\n            to=\"/ranking\"\n            className=\"col btn btn-light\"\n          >\n            Ranking\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Feedback;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Ranking() {\n  return (\n    <>\n      <h3 data-testid=\"ranking-title\">\n        Tela de ranking\n      </h3>\n      <Link data-testid=\"btn-go-home\" to=\"/\">Play Again</Link>\n    </>\n  );\n}\n\nexport default Ranking;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport store from './redux/store';\nimport Login from './pages/Login';\nimport Config from './pages/Congif';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Provider store={ store }>\n      <BrowserRouter>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/config\" component={ Config } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}